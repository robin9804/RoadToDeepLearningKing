# -*- coding: utf-8 -*-
"""Untitled2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1uB2ZNVzeBoUO9Rh00OSyedJxY7rB80h8
"""

import torch
import numpy as np
import matplotlib.pyplot as plt

x_data = [0.0, 1.0, 2.0]
y_data = [2.0, 4.0, 6.0]

w = 1.0

def forward(x):
  return x*w
def loss(x, y):
  y_pred = forward(x)
  return (y_pred-y)**2
def gradient(x, y):
  return 2*x*(x*w-y)

#Before training
print("predict (before training)", 4, forward(4))
##Training Loop
for epoch in range(100):
  for x_val, y_val in zip(x_data, y_data):
    grad = gradient(x_val, y_val)
    w = w-0.02*grad
    print('\t grad', x_val, y_val, grad)
    l = loss(x_val, y_val)
  print("progress : ", epoch, 'w=', w, 'loss = ', l)
##After training
print('predict (after training)', '4 hours', forward(4))

##y = x^2 w2 + x w1 + b
x_data = [0.0, 1.0, 2.0, 3.0, 4.0, 5.0]
y_data = [4.0, 1.0, 0.0, 1.0, 4.0, 9.0]

w1 = 0.1
w2 = 0.1
b = y_data[0]
def forward_quad(x):
  return w2*x**2+w1*x+b
def loss_quad(x, y):
  return (forward_quad(x)-y)**2  
def gradient_w1(x, y):
  return 2*x*(forward_quad(x)-y)
def gradient_w2(x, y):
  return (2*x**2)*(forward_quad(x)-y)

print('predict (before training)', 6, forward_quad(6))

for epoch in range(100):
  for x_val, y_val in zip(x_data, y_data):
    grad1 = gradient_w1(x_val, y_val)
    grad2 = gradient_w2(x_val, y_val)
    w1 = w1 -0.001*grad1
    w2 = w2 -0.001*grad2
    print('\t grad', x_val, y_val, grad1, grad2)
    l = loss_quad(x_val, y_val)
  print("progress:", epoch, 'w1= ', w1, 'w2=', w2, 'loss = ', l)

print('predict (after training)', '6', forward_quad(6))

