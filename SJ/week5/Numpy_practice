import numpy as np
a = np.array([1, 2, 3])
print(type(a))
print(a.shape)# size
print(a[0], a[1], a[2])
a[0] = 5
print(a)

b = np.array([[1, 2, 3], [4, 5, 6]]) # rank : 2
print(b.shape[0], b.shape[1])
print(b[0, 0], b[0, 1], b[0, 2])

import numpy as np

a = np.zeros((2, 2)) # 2X2 zero matrix
print(a)

b  = np.ones((1, 2)) # ones matrix
print(b)

c = np.full((2, 2), 10) # 모든 값이 특정 상수인 배열 생성
print(c)

d = np.eye(2) # identity
print(d)

e = np.random.random((2, 2)) #임의 값이 채워진 배열 생성
print(e)

import numpy as np

a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
print(a)
print(a[0, 1])
b = a[:2, 1:3] # 1, 2행, 2, 3열을 취하는 2X2 matrix
print(b)
b[0, 0] = 77
print(b)

import numpy as np
a = np.array([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])
row_r1 = a[1, :]#array의 2th row vector
row_r2 = a[2, :]
print(row_r1, row_r1.shape)
print(row_r2, row_r2.shape)

col_r1 = a[:, 1]
col_r2 = a[:, 2:3]
print(col_r1, col_r1.shape[0])
print(col_r2, col_r2.shape[0])

import numpy as np
a = np.array([[1,2], [3, 4], [5, 6]])

print(a[[0, 1, 2], [0, 1, 0]])# 1행 1열, 2행 2열, 3행 1열원소를 출력 : [1, 4, 5]
print(np.array([a[0, 0], a[1, 1], a[2, 0]]))
print(a[[0, 0], [1, 1]])
print(np.array([a[0, 1], a[0, 1]]))

import numpy as np
a = np.array([[1,2,3],[4,5,6],[7,8,9],[10,11,12]])
print(a)
b = np.array([0, 2, 0, 1])#index를 저장할 배열 생성
print(a[np.arange(4), b])#1행 1열, 2행 3열, 3행 1열, 4행 2열: 1 6 7 11 출력
a[np.arange(4), b] += 10 # 1행 1열, 2행 3열, 3행 1열, 4행 2열 각 원소 +10
print(a)

import numpy as np
#Boolean indexing
#불리언 배열 인덱싱을 통해 배열 속 요소를 취사선택할 수 있다.
a = np.array([[1, 2], [3, 4], [5, 6]])
bool_idx = (a>2)# a에서 2보다 큰 요소를 찾아 True and False로 리턴
print(bool_idx)

print(a[bool_idx])# 2보다 큰 요소에 대해서만 출력

print(a[a>2])

import numpy as np
x = np.array([1, 2])
print(x.dtype)

x = np.array([1.0, 2.0])
print(x.dtype)

x = np.array([1, 2], dtype = np.int64)
print(x.dtype)

import numpy as np
x = np.array([[1, 2], [3, 4]], dtype = np.float64)
y = np.array([[5, 6], [7, 8]], dtype = np.float64)

print(x+y)
print(np.add(x, y))

print(x-y)
print(np.subtract(x, y))

print(x*y)##요소별 곱셈 : MATLAB에서 x.*y와 같다.
print(np.multiply(x, y))

print(x/y)#요소별 나눗셈
print(np.divide(x, y))

print(np.sqrt(x))

import numpy as np

x = np.array([[1, 2],[3, 4]])
y = np.array([[5, 6], [7, 8]])

v = np.array([9, 10])
w = np.array([11, 12])

##dot: inner product of Vector
print(v.dot(w))
print(np.dot(v, w))

##행렬과 백터의 곱
print(x.dot(v))
print(np.dot(x, v))

##행렬곱
print(x.dot(y))
print(np.dot(x, y))

import numpy as np
x = np.array([[1, 2], [3,4]])
print(np.sum(x))
print(np.sum(x, axis = 0))##axis = 0 : column에 대한 sum
print(np.sum(x, axis = 1))##axis = 1 : row에 대한 sum


import numpy as np

x = np.array([[1, 2], [3, 4]])
print(x)
print(x.T)##Transpose

v = np.array([1, 2, 3])
print(v)
print(v.T)

import numpy as np
##행렬 x의 각 행에 벡터 v를 더한 뒤, 그 결과를 행렬 y에 저장한다
x = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]])
v = np.array([1, 0, 1])
y = np.empty_like(x) #행렬 x와 같은 shpae을 갖지만 비어있는 행렬을 생성
for i in range(4):
    y[i, :] = x[i, :]+v

print(y)

##하지만 행렬의 shape이 매우 큰 경우에 대해서 for를 이용한 구문은 속도가 매우 느릴 수
## 있어 다른 방법을 사용한다. v를 쌓은 matrix vv를 만들어 x + vv를 하면 같은 결과를
## 얻을 수 있다.
vv = np.tile(v, (4, 1))##v를 row에 1번씩 4번 쌓은것
print(vv)

print(x+vv)

##하지만 브로드 캐스팅을 이용하면 tile로 v를 여러번 복사한 matrix를 만들지 않아도
##연산이 가능하다
print(x+v)

import numpy as np
v = np.array([1, 2, 3])
w = np.array([4, 5])
v = np.reshape(v, (3, 1))
print(v*w)

x = np.array([[1, 2, 3], [4, 5, 6]])
v = np.reshape(v, (1, 3))
print(x+v)

w = np.reshape(w, (2, 1))
print(x+w)

w = np.reshape(w, (1, 2))
print((x.T+w).T)

print(x*2)
